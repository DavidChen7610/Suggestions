# -*- coding: utf-8 -*-
__author__ = 'boqingfu'

'''
Python 在设计之初借鉴了C语言的一些规则，比如选择C的long类型座位Python的整数类型，double作为浮点类型等，同事标准的算术运算，包括除法，
返回值总是和操作数类型相同，
作为静态类型语言，C语言这一规则问题不大，因为变量会预先申明类型，当类型不符的时候，编译器也会尽可能进行强制类型转换，否则编译会报错，
但python作为一门高级动态语言并没有类型申明这一说，因此在上面的例子中，你不能提前申明返回的计算结果为浮点数，当除法运算中两个操作数都为
整数的时候，其返回值也是整数，运算结构将直接阶段，从而在实际应用中造成潜在的质的误差。
Python中除了除法运算之外，整数和浮点数的其他操作行为还是一致的，因此这容易让人产生一种误解，数值的计算与具体操作数的类型(整数还是浮点数)
无关，但是事实上，对于整数除法这是编程过程中潜在的一个危险，因为，当你编写一个函数时，及时你希望调用者传递进入的时浮点类型，
但如果不在函数入口进行类型检查，或者转换，就无法阻止含税调用者传递整数参数，而往往这种类型的错误还不容易被发现，因此推荐的做法之一是：
当涉及除法运算的时候尽量先将操作数转换为浮点类型再做运算。
当然随着Python语言的发展，对整数除法问题也坐了一定的修正，在Python3中这个问题已经不存在了，Python3版本之前的版本可以通过
from __future__ import division方式使整数除法不再截断，这样即使不进行浮点类型转换，输出的结果也是正确的。
'''