# -*- coding: utf-8 -*-
__author__ = 'florije'

'''
使用with自动关闭资源
'''

'''
我们在打开文件的时候用f = open('test.txt', 'r')，然后f.write('test')
我们都知道这样是写不进去的，那么，怎么处理才好呢？以前我们用try finally来进行处理。
这是一种比较古老的方法，现在流行的方法是with语法
with语法还支持嵌套的方式，支持多个with语句他们两者可以相互的转换，with expr1 as e1, expr2 as e2:
其实等价的形式就是with expr1 as e1: with expr2 as e2:
with语句可以在代码执行完毕后还原进入该代码块的现场，包含有with语句块的执行过程如下：
1/计算表达式的值，返回一个上下文管理器对象
2/加载上下文管理器对象的__exit__()方法以备后用
3/调用上下文管理器的__enter__()方法
4/如果with语句中设置了目标对象，则将__enter__()方法的返回值赋值给目标对象。
5/执行with中的代码块，
6/如果步骤5中代码正常结束，调用上下文管理器的__exit__()方法，其返回值直接忽略。
7/如果步骤5中代码执行过程中发生异常，调用上下文管理器对象的__exit__()方法，并将异常类型，值以及traceback信息作为参数传递给__exit__()
方法，如果__exit__()方法返回值为false，则异常会被重新抛出，如果其返回值为true，异常被挂起，程序继续执行。


使用with处理的好处就是，无论程序以何种方式跳出with快，总能保证逻辑被正常关闭，实际上它不仅仅针对的是上面说的文件的处理，针对其他情景
也是同样的可以实现运行时环境的清理和还原。比如说多线程编程中的锁对象的管理。


with的神奇之处得益于
'''