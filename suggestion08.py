# -*- coding: utf-8 -*-
__author__ = 'florije'
if __name__ == '__main__':
    x = 1
    y = 2
    # assert x == y, 'not equals'
    if __debug__ and not x == y:
        raise AssertionError("not equals")

    '''
    __debug__的默认值设置为True，且只是只读的，在Python2.7里面还是无法进行修改，
    断言是有性能代价，它会对性能产生一定的影响，对于编译型的语言，例如C，C++，这些都是不重要的，因为断言只能在调试模式下启动，但是Python
    并没有严格定义调试模式和发布模式之间的区别，通常禁用断言的的方法是在运行脚本的时候加上-O标志，这种方式带来的影响是它并不优化字节码，
    而是忽略与断言相关的语言。

    断言实际上被设计用来捕获用户所定义的约束的。而不是用来捕获程序本身的错误的。因此使用断言的时候应该注意以下几点。
    1/不要滥用。
    2/如果Python本身的异常能够处理就不要再使用处理。
    3/不要使用断言来检查用户的输入。
    4/在函数调用后，当需要确认返回值是否合理时可以使用断言。
    5/当条件是业务逻辑继续下去的先决条件时可以使用断言。
    '''