# -*- coding: utf-8 -*-
__author__ = 'florije'
import sys

print sys.path

'''
Python 提供了3种方式来引入外部模块:
import语句
from...import...
__import__函数
前面两种是比较常见的方式，然后后面的函数，是跟import方式一样的引入方式，函数的话是显式的将模块的名称作为字符串传递并赋值给命名空间的变量。


需要注意的几点就是：
一般情况下尽量优先使用import a的形式，如访问a中的B，就是import a.B
有节制的使用from a import B形式，可以直接访问B。
尽量避免使用from a import *,因为这样会污染命名空间，并且无法清晰的表示导入了哪些对象。

然后解释下到底为什么这么说：

Python的import机制，Python在初始化运行环境的时候会预先加载一批内建模块到内存中，这些模块相关的信息被存放在sys.modules中，读者导入sys
模块后再Python解释器中输入sys.modules.items()便可显示出所有在预加载模块的相关信息。

在加载一个模块的时候，解释器实际上要完成以下动作：
1/在sys.modules中进行搜索看看该模块是否已经存在，如果存在，则将其导入到当期那局部命名空间，加载结束。
2/如果在sys.modules中找不到对应模块的名称，则为需要导入的模块创建一个字典对象，并将该对象信息插入sys.modules中。
3/加载前确认是否需要对模块对应的文件进行编译，如果需要则先进行编译。
4/执行动态加载，在当前模块的命名空间中执行编译后的字节码，并将其中所有的对象放入模块对应的字典中。
'''

print sys.modules

