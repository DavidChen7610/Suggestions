# -*- coding: utf-8 -*-
#!/usr/bin/python
__author__ = 'yanghua'

# (1)避免劣化代码，主要有以下几个方面
# 避免只用大小写来区分不同的对象，
# 避免使用容易引起混淆的名称
# 不要害怕过长的变量名
# (2)深入认识Python有助于编写Pythonic代码
# 全面掌握Python提供给我们的所有特性，包括语言特性和库特性，其中最好的学习方式应该是通读官方手册中得Language Reference，掌握了语言特性
# 和库特性，以后许多惯用法就自然而然的掌握了，写代码时候自然会使用常见的公认的简短的惯用法来实现预期的效果，也使得代码显得尤为Pythonic
# 随着Python版本的更新，时间的推移，Python语言不断进化，社区不断成长，还需要学习每个Python版本提供的新特性，以及掌握他们的变化趋势，
# 从另一个角度看，一方面Python推荐使用大量的惯用法来完成任务，完成任务的唯一方法，另一方面，社区不断演变的新惯用法反过来又影响了语言的进化，
# 以更好的支持惯用法，
# 深入学习业界公认的比较Pythonic的代码，比如Flask，gevent和requests等
#