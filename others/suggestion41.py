# -*- coding: utf-8 -*-
__author__ = 'florije'
'''
尽管应用程序通常能够通过配置文件在不修改代码的情况下改变行为，但是提供灵活易用的命令行参数依然非常有意义，比如，减轻用户的学习成本，通常
命令行参数的用法只需要在应用程序名后面添加 --help参数就能获得，而配置文件的配制方法通常需要通读手册才能掌握，
同一个运行环境中有多个配置文件存在，那么需要通过命令行参数指定当前使用哪一个配置文件，如pylint的--rcfile参数就是做这个的。
为了做好命令行处理这件事，Pythonista尝试好几个方案，标准库中留下的getopt，optparse和argparse就是证明，其中getopt是类似UNIX系统中
getopt()这个C函数的实现，可以处理长短配置项，和参数，如有命令行参数-a -b -c foo -d bar a1 a2
在处理之后的结果是两个列表，其中一个是配置项列表，[('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]
每一个元素都由配置项名和其值，默认为空字符串组成，另一个是参数列表['a1', 'a2']
每一个元素都是一个参数值，getopt的问题在于两点，一个是长短配置项要分开处理，二是对非法参数和必填参数的处理要手动处理。

'''